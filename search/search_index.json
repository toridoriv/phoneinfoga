{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the PhoneInfoga documentation PhoneInfoga is one of the most advanced tools to scan phone numbers using only free resources. The goal is to first gather standard information such as country, area, carrier and line type on any international phone numbers with a very good accuracy. Then search for footprints on search engines to try to find the VoIP provider or identify the owner. Read the related blog post Features Check if phone number exists and is possible Gather standard informations such as country, line type and carrier OSINT footprinting using external APIs, Google Hacking, phone books & search engines Check for reputation reports, social media, disposable numbers and more Scan several numbers at once Use custom formatting for more effective OSINT reconnaissance NEW : Serve a web client along with a REST API to run scans from the browser NEW : Run your own web instance as a service NEW : Programmatic usage with Go modules Anti-features Does not claim to provide relevant or verified data, it's just a tool ! Does not allow to \"track\" a phone or its owner in real time Does not allow to get the precise phone location Does not allow to hack a phone Bug Found a bug ? Feel free to open an issue . You can also reach me on Twitter or at raphael(at)crvx.fr. PGP: B64687AB97F268F43E67B97A8916203E540C65A4","title":"Welcome"},{"location":"#welcome-to-the-phoneinfoga-documentation","text":"PhoneInfoga is one of the most advanced tools to scan phone numbers using only free resources. The goal is to first gather standard information such as country, area, carrier and line type on any international phone numbers with a very good accuracy. Then search for footprints on search engines to try to find the VoIP provider or identify the owner.","title":"Welcome to the PhoneInfoga documentation"},{"location":"#read-the-related-blog-post","text":"","title":"Read the related blog post"},{"location":"#features","text":"Check if phone number exists and is possible Gather standard informations such as country, line type and carrier OSINT footprinting using external APIs, Google Hacking, phone books & search engines Check for reputation reports, social media, disposable numbers and more Scan several numbers at once Use custom formatting for more effective OSINT reconnaissance NEW : Serve a web client along with a REST API to run scans from the browser NEW : Run your own web instance as a service NEW : Programmatic usage with Go modules","title":"Features"},{"location":"#anti-features","text":"Does not claim to provide relevant or verified data, it's just a tool ! Does not allow to \"track\" a phone or its owner in real time Does not allow to get the precise phone location Does not allow to hack a phone Bug Found a bug ? Feel free to open an issue . You can also reach me on Twitter or at raphael(at)crvx.fr. PGP: B64687AB97F268F43E67B97A8916203E540C65A4","title":"Anti-features"},{"location":"contribute/","text":"Contribute This page describe the project structure and gives you a bit of help to start contributing. The project is maintained by a single person: sundowndev . Contributions are welcome ! Want to contribute ? Clone the project and open some pull requests ! Project Building from source Requirements : Node.js >= v10.x npm or yarn Go >= 1.13 Note: if you're using npm, just replace yarn <command> by npm run <command> . # Build static assets # This will create dist directory containing client's static files $ (cd client && yarn && yarn build) # Generate in-memory assets # This will put content of dist directory in memory. It's usually needed to build but # the design requires you to do it anyway. # This step is needed at each change if you're developing on the client. $ go generate ./... # Build the whole project $ go build -v . If you're developing, you don't need to build at each changes, you can compile then run with the go run command : $ go run main.go File structure api # REST API code client # web client code cmd # Command-line app code docs # Documentation pkg # Code base for scanners, utils ... scripts # Development & deployment scripts go.mod # Go modules file main.go # Application entrypoint Testing Go code # Run test suite go test -v ./... # Collect coverage go test -coverprofile=coverage.out ./... # Open coverage file as HTML go tool cover -html=coverage.out Typescript code Developping on the web client. cd client yarn test yarn test:unit yarn test:e2e If you're developing on the client, you can watch changes with yarn build:watch . Formatting Go code We use a shell script to format Go files. sh ./scripts/format.sh # You can also use GolangCI golangci-lint run -D errcheck Typescript code cd client yarn lint yarn lint:fix Documentation We use mkdocs to write our documentation. Install mkdocs python3 -m pip install mkdocs Serve documentation on localhost This is the only command you need to start working on docs. mkdocs serve # or python3 -m mkdocs serve Build website mkdocs build Deploy on github pages mkdocs gh-deploy","title":"Contribute"},{"location":"contribute/#contribute","text":"This page describe the project structure and gives you a bit of help to start contributing. The project is maintained by a single person: sundowndev . Contributions are welcome ! Want to contribute ? Clone the project and open some pull requests !","title":"Contribute"},{"location":"contribute/#project","text":"","title":"Project"},{"location":"contribute/#building-from-source","text":"Requirements : Node.js >= v10.x npm or yarn Go >= 1.13 Note: if you're using npm, just replace yarn <command> by npm run <command> . # Build static assets # This will create dist directory containing client's static files $ (cd client && yarn && yarn build) # Generate in-memory assets # This will put content of dist directory in memory. It's usually needed to build but # the design requires you to do it anyway. # This step is needed at each change if you're developing on the client. $ go generate ./... # Build the whole project $ go build -v . If you're developing, you don't need to build at each changes, you can compile then run with the go run command : $ go run main.go","title":"Building from source"},{"location":"contribute/#file-structure","text":"api # REST API code client # web client code cmd # Command-line app code docs # Documentation pkg # Code base for scanners, utils ... scripts # Development & deployment scripts go.mod # Go modules file main.go # Application entrypoint","title":"File structure"},{"location":"contribute/#testing","text":"","title":"Testing"},{"location":"contribute/#go-code","text":"# Run test suite go test -v ./... # Collect coverage go test -coverprofile=coverage.out ./... # Open coverage file as HTML go tool cover -html=coverage.out","title":"Go code"},{"location":"contribute/#typescript-code","text":"Developping on the web client. cd client yarn test yarn test:unit yarn test:e2e If you're developing on the client, you can watch changes with yarn build:watch .","title":"Typescript code"},{"location":"contribute/#formatting","text":"","title":"Formatting"},{"location":"contribute/#go-code_1","text":"We use a shell script to format Go files. sh ./scripts/format.sh # You can also use GolangCI golangci-lint run -D errcheck","title":"Go code"},{"location":"contribute/#typescript-code_1","text":"cd client yarn lint yarn lint:fix","title":"Typescript code"},{"location":"contribute/#documentation","text":"We use mkdocs to write our documentation.","title":"Documentation"},{"location":"contribute/#install-mkdocs","text":"python3 -m pip install mkdocs","title":"Install mkdocs"},{"location":"contribute/#serve-documentation-on-localhost","text":"This is the only command you need to start working on docs. mkdocs serve # or python3 -m mkdocs serve","title":"Serve documentation on localhost"},{"location":"contribute/#build-website","text":"mkdocs build","title":"Build website"},{"location":"contribute/#deploy-on-github-pages","text":"mkdocs gh-deploy","title":"Deploy on github pages"},{"location":"formatting/","text":"Formatting phone numbers Basics The tool only accepts E164 and International formats as input. E164: +3396360XXXX International: +33 9 63 60 XX XX National: 09 63 60 XX XX RFC3966: tel:+33-9-63-60-XX-XX Out-of-country format from US: 011 33 9 63 60 XX XX E.164 formatting for phone numbers entails the following: A + (plus) sign International Country Calling code Local Area code Local Phone number For example, here\u2019s a US-based number in standard local formatting: (415) 555-2671 Here\u2019s the same phone number in E.164 formatting: +14155552671 In the UK, and many other countries internationally, local dialing may require the addition of a '0' in front of the subscriber number. With E.164 formatting, this '0' must usually be removed. For example, here\u2019s a UK-based number in standard local formatting: 020 7183 8750 Here\u2019s the same phone number in E.164 formatting: +442071838750 Custom formatting Sometimes the phone number has footprints but is used with a different formatting. This is a problem because for example if we search for \"+15417543010\", we'll not find web pages that write it that way : \"(541) 754\u20133010\". So the tool use a (optional) custom formatting given by the user to find further and more accurate results. To use this feature properly and make the results more valuable, try to use a format that someone of the number' country would usually use to share the phone number online. For example, French people usually write numbers that way online : 06.20.30.40.50 or 06 20 30 40 50 . For US-based numbers, the most common format is : 543-456-1234 . Examples Here are some examples of custom formatting for US-based phone numbers : +1 618-555-xxxx (+1)618-555-xxxx +1/618-555-xxxx (618) 555xxxx (618) 555-xxxx (618) 555.xxxx (618)555xxxx (618)555-xxxx (618)555.xxxx For European countries (France as example) : +3301 86 48 xx xx +33018648xxxx +33018 648 xxx x (0033)018648xxxx (+33)018 648 xxx x +33/018648xxxx (0033)018 648 xxx x +33018-648-xxx-x (+33)018648xxxx (+33)01 86 48 xx xx +33/018-648-xxx-x +33/01-86-48-xx-xx +3301-86-48-xx-xx (0033)01 86 48 xx xx +33/01 86 48 xx xx (+33)018-648-xxx-x (+33)01-86-48-xx-xx (0033)01-86-48-xx-xx (0033)018-648-xxx-x +33/018 648 xxx x Local scan formatting (developers) The local scan create several variables to be usable in OSINT footprinting and other scanners. Examples : { 'input': '+1 512-618-xxxx', 'default': '1512618xxxx', 'local': '512618xxxx', 'international': '+1 512-618-xxxx', 'country': 'United States', 'countryCode': '+1', 'countryIsoCode': 'US', 'location': 'Texas', 'carrier': '' } { 'input': '+33 066651xxxx', 'default': '3366651xxxx', 'local': '66651xxxx', 'international': '+33 66651xxxx', 'country': 'France', 'countryCode': '+33', 'countryIsoCode': 'FR', 'location': 'France', 'carrier': 'Bouygues' }","title":"Formatting phone numbers"},{"location":"formatting/#formatting-phone-numbers","text":"","title":"Formatting phone numbers"},{"location":"formatting/#basics","text":"The tool only accepts E164 and International formats as input. E164: +3396360XXXX International: +33 9 63 60 XX XX National: 09 63 60 XX XX RFC3966: tel:+33-9-63-60-XX-XX Out-of-country format from US: 011 33 9 63 60 XX XX E.164 formatting for phone numbers entails the following: A + (plus) sign International Country Calling code Local Area code Local Phone number For example, here\u2019s a US-based number in standard local formatting: (415) 555-2671 Here\u2019s the same phone number in E.164 formatting: +14155552671 In the UK, and many other countries internationally, local dialing may require the addition of a '0' in front of the subscriber number. With E.164 formatting, this '0' must usually be removed. For example, here\u2019s a UK-based number in standard local formatting: 020 7183 8750 Here\u2019s the same phone number in E.164 formatting: +442071838750","title":"Basics"},{"location":"formatting/#custom-formatting","text":"Sometimes the phone number has footprints but is used with a different formatting. This is a problem because for example if we search for \"+15417543010\", we'll not find web pages that write it that way : \"(541) 754\u20133010\". So the tool use a (optional) custom formatting given by the user to find further and more accurate results. To use this feature properly and make the results more valuable, try to use a format that someone of the number' country would usually use to share the phone number online. For example, French people usually write numbers that way online : 06.20.30.40.50 or 06 20 30 40 50 . For US-based numbers, the most common format is : 543-456-1234 .","title":"Custom formatting"},{"location":"formatting/#examples","text":"Here are some examples of custom formatting for US-based phone numbers : +1 618-555-xxxx (+1)618-555-xxxx +1/618-555-xxxx (618) 555xxxx (618) 555-xxxx (618) 555.xxxx (618)555xxxx (618)555-xxxx (618)555.xxxx For European countries (France as example) : +3301 86 48 xx xx +33018648xxxx +33018 648 xxx x (0033)018648xxxx (+33)018 648 xxx x +33/018648xxxx (0033)018 648 xxx x +33018-648-xxx-x (+33)018648xxxx (+33)01 86 48 xx xx +33/018-648-xxx-x +33/01-86-48-xx-xx +3301-86-48-xx-xx (0033)01 86 48 xx xx +33/01 86 48 xx xx (+33)018-648-xxx-x (+33)01-86-48-xx-xx (0033)01-86-48-xx-xx (0033)018-648-xxx-x +33/018 648 xxx x","title":"Examples"},{"location":"formatting/#local-scan-formatting-developers","text":"The local scan create several variables to be usable in OSINT footprinting and other scanners. Examples : { 'input': '+1 512-618-xxxx', 'default': '1512618xxxx', 'local': '512618xxxx', 'international': '+1 512-618-xxxx', 'country': 'United States', 'countryCode': '+1', 'countryIsoCode': 'US', 'location': 'Texas', 'carrier': '' } { 'input': '+33 066651xxxx', 'default': '3366651xxxx', 'local': '66651xxxx', 'international': '+33 66651xxxx', 'country': 'France', 'countryCode': '+33', 'countryIsoCode': 'FR', 'location': 'France', 'carrier': 'Bouygues' }","title":"Local scan formatting (developers)"},{"location":"go-module-usage/","text":"Go module usage You can easily use scanners in your own Golang script. You can find Go documentation here . Install the module go get -v github.com/sundowndev/phoneinfoga/v2 Usage example package main import ( \"fmt\" \"log\" \"github.com/sundowndev/phoneinfoga/v2/pkg/scanners\" ) func main() { number, err := scanners.LocalScan(\"<number>\") if err != nil { log.Fatal(err) } links := scanners.GoogleSearchScan(number) for _, link := range links.Individuals { fmt.Println(link.URL) // Google search link to scan } }","title":"Go module usage"},{"location":"go-module-usage/#go-module-usage","text":"You can easily use scanners in your own Golang script. You can find Go documentation here .","title":"Go module usage"},{"location":"go-module-usage/#install-the-module","text":"go get -v github.com/sundowndev/phoneinfoga/v2","title":"Install the module"},{"location":"go-module-usage/#usage-example","text":"package main import ( \"fmt\" \"log\" \"github.com/sundowndev/phoneinfoga/v2/pkg/scanners\" ) func main() { number, err := scanners.LocalScan(\"<number>\") if err != nil { log.Fatal(err) } links := scanners.GoogleSearchScan(number) for _, link := range links.Individuals { fmt.Println(link.URL) // Google search link to scan } }","title":"Usage example"},{"location":"install/","text":"To install PhoneInfoga, you'll need to download the binary or build the software from its source code. Info For now, only Linux, MacOS and Windows are supported. If you don't see your OS/arch on the release page on GitHub , it means it's not explicitly supported. You can build from source by yourself anyway. Want your OS to be supported ? Please open an issue on GitHub . Binary installation (recommanded) Follow the instructions : Go to release page on GitHub Choose your OS and architecture Download the archive, extract the binary then run it in a terminal You can also do it from the terminal (UNIX systems only) : # Download latest release in the current directory curl -sSL https://raw.githubusercontent.com/sundowndev/phoneinfoga/master/support/scripts/install | bash # Check the binary ./phoneinfoga version # You can also install it globally sudo mv ./phoneinfoga /usr/bin/phoneinfoga To ensure your system is supported, please check the output of echo \"$(uname -s)_$(uname -m)\" in your terminal and see if it's available on the GitHub release page . Using Docker Info If you want to use the beta channel, you can use the next tag, it's updated directly from the master branch. But in most cases we recommend using latest , v2 or stable tags to only get release updates. From docker hub You can pull the repository directly from Docker hub docker pull sundowndev/phoneinfoga:latest Then run the tool docker run --rm -it sundowndev/phoneinfoga version Docker-compose You can use a single docker-compose file to run the tool without downloading the source code. version: '3.7' services: phoneinfoga: container_name: phoneinfoga restart: on-failure image: phoneinfoga:latest command: serve ports: - \"80:5000\" From the source code You can download the source code, then build the docker images Build Build the image docker-compose build CLI usage docker-compose run --rm phoneinfoga --help Run web services docker-compose up -d Disable web client Edit docker-compose.yml and add the --no-client option # docker-compose.yml command: \"serve --no-client\" Troubleshooting All output is sent to stdout so it can be inspected by running: docker logs -f <container-id|container-name>","title":"Installation"},{"location":"install/#binary-installation-recommanded","text":"Follow the instructions : Go to release page on GitHub Choose your OS and architecture Download the archive, extract the binary then run it in a terminal You can also do it from the terminal (UNIX systems only) : # Download latest release in the current directory curl -sSL https://raw.githubusercontent.com/sundowndev/phoneinfoga/master/support/scripts/install | bash # Check the binary ./phoneinfoga version # You can also install it globally sudo mv ./phoneinfoga /usr/bin/phoneinfoga To ensure your system is supported, please check the output of echo \"$(uname -s)_$(uname -m)\" in your terminal and see if it's available on the GitHub release page .","title":"Binary installation (recommanded)"},{"location":"install/#using-docker","text":"Info If you want to use the beta channel, you can use the next tag, it's updated directly from the master branch. But in most cases we recommend using latest , v2 or stable tags to only get release updates.","title":"Using Docker"},{"location":"install/#from-docker-hub","text":"You can pull the repository directly from Docker hub docker pull sundowndev/phoneinfoga:latest Then run the tool docker run --rm -it sundowndev/phoneinfoga version","title":"From docker hub"},{"location":"install/#docker-compose","text":"You can use a single docker-compose file to run the tool without downloading the source code. version: '3.7' services: phoneinfoga: container_name: phoneinfoga restart: on-failure image: phoneinfoga:latest command: serve ports: - \"80:5000\"","title":"Docker-compose"},{"location":"install/#from-the-source-code","text":"You can download the source code, then build the docker images","title":"From the source code"},{"location":"install/#build","text":"Build the image docker-compose build","title":"Build"},{"location":"install/#cli-usage","text":"docker-compose run --rm phoneinfoga --help","title":"CLI usage"},{"location":"install/#run-web-services","text":"docker-compose up -d","title":"Run web services"},{"location":"install/#disable-web-client","text":"Edit docker-compose.yml and add the --no-client option # docker-compose.yml command: \"serve --no-client\"","title":"Disable web client"},{"location":"install/#troubleshooting","text":"All output is sent to stdout so it can be inspected by running: docker logs -f <container-id|container-name>","title":"Troubleshooting"},{"location":"resources/","text":"Resources Inderstanding phone numbers whitepages.fr/phonesystem Formatting-International-Phone-Numbers National_conventions_for_writing_telephone_numbers Open data api.ovh.com/console/#/telephony countrycode.org countryareacode.net directory.didww.com/area-prefixes numinfo.net gist.github.com/Goles/3196253 Footprinting Info Both free and premium resources are included. Be careful, the listing of a data source here does not mean it has been verified or is used in the tool. Data might be false. Use it as an OSINT framework. Reputation / fraud scamcallfighters.com signal-arnaques.com whosenumber.info findwhocallsme.com yellowpages.ca phonenumbers.ie who-calledme.com usphonesearch.net whocalled.us quinumero.info Disposable numbers receive-sms-online.com receive-sms-now.com hs3x.com twilio.com freesmsverification.com freeonlinephone.org sms-receive.net smsreceivefree.com receive-a-sms.com receivefreesms.com freephonenum.com receive-smss.com receivetxt.com temp-mails.com receive-sms.com receivesmsonline.net receivefreesms.com sms-receive.net pinger.com (=> textnow.com) receive-a-sms.com k7.net kall8.com faxaway.com receivesmsonline.com receive-sms-online.info sellaite.com getfreesmsnumber.com smsreceiving.com smstibo.com catchsms.com freesmscode.com smsreceiveonline.com smslisten.com sms.sellaite.com smslive.co Individuals Facebook Twitter Instagram Linkedin True People Fast People Background Check Pipl Spytox Makelia IvyCall PhoneSearch 411 USPhone WP Plus Thats Them True Caller Sync.me WhoCallsMe ZabaSearch DexKnows WeLeakInfo OK Caller SearchBug numinfo.net Google dork examples insubject:\"+XXXXXXXXX\" OR insubject:\"+XXXXX\" OR insubject:\"XXXXX XXX XXX\" insubject:\"XXXXXXXXX\" OR intitle:\"XXXXXXXXX\" intext:\"XXXXXXXXX\" AND (ext:doc OR ext:docx OR ext:odt OR ext:pdf OR ext:rtf OR ext:sxw OR ext:psw OR ext:ppt OR ext:pptx OR ext:pps OR ext:csv OR ext:txt OR ext:html) site:\"hs3x.com\" \"+XXXXXXXXX\" site:signal-arnaques.com intext:\"XXXXXXXXX\" intitle:\" | Phone Fraud\"","title":"Resources"},{"location":"resources/#resources","text":"","title":"Resources"},{"location":"resources/#inderstanding-phone-numbers","text":"whitepages.fr/phonesystem Formatting-International-Phone-Numbers National_conventions_for_writing_telephone_numbers","title":"Inderstanding phone numbers"},{"location":"resources/#open-data","text":"api.ovh.com/console/#/telephony countrycode.org countryareacode.net directory.didww.com/area-prefixes numinfo.net gist.github.com/Goles/3196253","title":"Open data"},{"location":"resources/#footprinting","text":"Info Both free and premium resources are included. Be careful, the listing of a data source here does not mean it has been verified or is used in the tool. Data might be false. Use it as an OSINT framework.","title":"Footprinting"},{"location":"resources/#reputation-fraud","text":"scamcallfighters.com signal-arnaques.com whosenumber.info findwhocallsme.com yellowpages.ca phonenumbers.ie who-calledme.com usphonesearch.net whocalled.us quinumero.info","title":"Reputation / fraud"},{"location":"resources/#disposable-numbers","text":"receive-sms-online.com receive-sms-now.com hs3x.com twilio.com freesmsverification.com freeonlinephone.org sms-receive.net smsreceivefree.com receive-a-sms.com receivefreesms.com freephonenum.com receive-smss.com receivetxt.com temp-mails.com receive-sms.com receivesmsonline.net receivefreesms.com sms-receive.net pinger.com (=> textnow.com) receive-a-sms.com k7.net kall8.com faxaway.com receivesmsonline.com receive-sms-online.info sellaite.com getfreesmsnumber.com smsreceiving.com smstibo.com catchsms.com freesmscode.com smsreceiveonline.com smslisten.com sms.sellaite.com smslive.co","title":"Disposable numbers"},{"location":"resources/#individuals","text":"Facebook Twitter Instagram Linkedin True People Fast People Background Check Pipl Spytox Makelia IvyCall PhoneSearch 411 USPhone WP Plus Thats Them True Caller Sync.me WhoCallsMe ZabaSearch DexKnows WeLeakInfo OK Caller SearchBug numinfo.net","title":"Individuals"},{"location":"resources/#google-dork-examples","text":"insubject:\"+XXXXXXXXX\" OR insubject:\"+XXXXX\" OR insubject:\"XXXXX XXX XXX\" insubject:\"XXXXXXXXX\" OR intitle:\"XXXXXXXXX\" intext:\"XXXXXXXXX\" AND (ext:doc OR ext:docx OR ext:odt OR ext:pdf OR ext:rtf OR ext:sxw OR ext:psw OR ext:ppt OR ext:pptx OR ext:pps OR ext:csv OR ext:txt OR ext:html) site:\"hs3x.com\" \"+XXXXXXXXX\" site:signal-arnaques.com intext:\"XXXXXXXXX\" intitle:\" | Phone Fraud\"","title":"Google dork examples"},{"location":"usage/","text":"Here is the documentation for CLI usage. $ phoneinfoga PhoneInfoga is one of the most advanced tools to scan phone numbers using only free resources. Usage: phoneinfoga [command] Examples: phoneinfoga scan -n <number> Available Commands: help Help about any command scan Scan a phone number serve Serve web client version Print current version of the tool Flags: -h, --help help for phoneinfoga Use \"phoneinfoga [command] --help\" for more information about a command. Running a scan Use the scan command with the -n (or --number ) option. phoneinfoga scan -n \"+1 (555) 444-1212\" phoneinfoga scan -n \"+33 06 79368229\" phoneinfoga scan -n \"33679368229\" Special chars such as ( ) - + will be escaped so typing US-based numbers stay easy : phoneinfoga scan -n \"+1 555-444-3333\" Note that the country code is essential. You don't know which country code to use ? Find it here Available scanners Numverify Google search OVH Numverify provide standard but useful informations such as number's country code, location, line type and carrier. OVH is, besides being a web and cloud hosting company, a telecom provider with several VoIP numbers in Europe. Thanks to their API-key free REST API , we are able to tell if a number is owned by OVH Telecom or not. Google search uses Google search engine and Google Dorks to search phone number's footprints everywhere on the web. It allows you to search for scam reports, social media profiles, documents and more. This scanner does only one thing: generating several Google search links from a given phone number. You then have to manually open them in your browser to see results. You may therefore have links that do not return any results. Launch web client & REST API Run the tool through a REST API with a web client. The API has been written in Go and web client in Vue.js. phoneinfoga serve phoneinfoga serve -p 8080 # default port is 5000 You should then be able to see the web client at http://localhost:<port> . Run the REST API only You can choose to only run the REST API without the web client : phoneinfoga serve --no-client","title":"Getting started"},{"location":"usage/#running-a-scan","text":"Use the scan command with the -n (or --number ) option. phoneinfoga scan -n \"+1 (555) 444-1212\" phoneinfoga scan -n \"+33 06 79368229\" phoneinfoga scan -n \"33679368229\" Special chars such as ( ) - + will be escaped so typing US-based numbers stay easy : phoneinfoga scan -n \"+1 555-444-3333\" Note that the country code is essential. You don't know which country code to use ? Find it here","title":"Running a scan"},{"location":"usage/#available-scanners","text":"Numverify Google search OVH Numverify provide standard but useful informations such as number's country code, location, line type and carrier. OVH is, besides being a web and cloud hosting company, a telecom provider with several VoIP numbers in Europe. Thanks to their API-key free REST API , we are able to tell if a number is owned by OVH Telecom or not. Google search uses Google search engine and Google Dorks to search phone number's footprints everywhere on the web. It allows you to search for scam reports, social media profiles, documents and more. This scanner does only one thing: generating several Google search links from a given phone number. You then have to manually open them in your browser to see results. You may therefore have links that do not return any results.","title":"Available scanners"},{"location":"usage/#launch-web-client-rest-api","text":"Run the tool through a REST API with a web client. The API has been written in Go and web client in Vue.js. phoneinfoga serve phoneinfoga serve -p 8080 # default port is 5000 You should then be able to see the web client at http://localhost:<port> .","title":"Launch web client &amp; REST API"},{"location":"usage/#run-the-rest-api-only","text":"You can choose to only run the REST API without the web client : phoneinfoga serve --no-client","title":"Run the REST API only"}]}